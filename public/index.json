[{"content":"In silico protein folding Recent improvements in protein folding tools such as AlphaFold2 have dramatically changed protein structure research. In silico predictions have been able to reach comparable accuracy to experimental techniques such as X-ray crystallography and cryo-electron microscopy. These tools may be useful to help filter protein structures for experimental studies.\nMissense mutations Missense mutations are single nucleotide changes in nucleotide sequence that lead to amino acid change in the protein sequence. All single nucleotide changes don\u0026rsquo;t lead to amino acid change, but may result in synonymous mutation (no amino acid change), early stop codon (translation terminates) or a splicing change if located at splicing site.\nSingle nucleotide changes The effect of an amino acid change on protein structure and function is not always clear when only looking at the amino acid sequence. Some changes occur at known active sites or post-translational modification sites which may strongly indicate a deleterious effect on the protein function.\nBut what about the changes located outside of these sites?\nTraditionally the effect of the amino acid changes has been studied experimentally: producing protein products with the mutated amino acid, extracting the protein and solving its protein structure with for example X-ray crystallography. Experimental protocols are expensive and time-consuming and hence there\u0026rsquo;s a huge interest in pre-filtering the potential structures in cases where there are a large number of mutations of interest.\nCreating mutated sequences for in silico analysis I recently wanted to automate mutating protein FASTA sequences for AlphaFold2 protein folding and made a script for that.\nSet API connection The script uses Ensembl REST API GRCh37 version and first sets a connection to the API:\n1import requests 2from requests.adapters import HTTPAdapter 3from requests.packages.urllib3.util.retry import Retry 4from requests_toolbelt import sessions 5 6 7def set_connection(): 8\tserver = \u0026#34;http://grch37.rest.ensembl.org\u0026#34; 9\tsession = sessions.BaseUrlSession(base_url = server) 10 11\tretry_strategy = Retry( 12\ttotal=3, 13\tbackoff_factor=2, 14\tstatus_forcelist=[429,500,502,503,504], 15\tmethod_whitelist=[\u0026#39;HEAD\u0026#39;,\u0026#39;GET\u0026#39;] 16\t) 17 18\tadapter = HTTPAdapter(max_retries=retry_strategy) 19\tsession.mount(\u0026#39;http://\u0026#39;,adapter) 20 21\treturn session 22 23 24session = set_connection() This creates a lasting connection to the API during which you can do multiple requests without closing and opening the connection each time.\nRead in data After the connection is set you read in the data, which is a text file with column \u0026ldquo;Protein_change\u0026rdquo; and one amino acid change of the format A256T per row (All changes for the SAME protein):\nProtein_change A356T V14F 1def read_data(data): 2 try: 3 datafile = pd.read_csv(data, sep=\u0026#39;\\t\u0026#39;) 4 except FileNotFoundError: 5 logging.exception(\u0026#34;Data file not found\u0026#34;) 6 sys.exit() 7 else: 8 logging.info(f\u0026#34;Datafile {data} read successfully.\u0026#34;) 9 return datafile 10 11data = read_data(File) Ideally you have all your amino acid changes for the same protein transcript but that is not always the case when gathering mutations from literature. Some proteins may have differing amino acid transcripts; longer/shorter versions, or older/newer versions that have a bit differing mutation locations. This script currently takes the default/most common protein sequence from Ensembl server based on Ensembl transcript ENST.\nGet protein FASTA sequence First request the protein sequence (ENSP) from the API, and separate the ENSP name and amino acid sequence in their own variables:\n1def get_protein_seq(ENST,session): 2 ext = f\u0026#34;/sequence/id/{ENST}?type=protein\u0026#34; 3 4 p_seq = request_server(ext, session) 5 ESP,seq = p_seq.text.split(\u0026#39;\\n\u0026#39;,1) 6 seq = seq.replace(\u0026#39;\\n\u0026#39;,\u0026#39;\u0026#39;) 7 logging.info(f\u0026#34;Read protein sequence {ESP} for transcript {ENST}.\u0026#34;) 8 return(ESP,seq) 9 10ENSP, seq = get_protein_seq(ENST,session) Make amino acid changes to the sequence Next, make an amino acid change to the amino acid sequence for the location specified in the \u0026lsquo;Protein_change\u0026rsquo; column of the data file. Make two lists, first containing the ENSP-code + amino acid change as a name for the sequence and the second one includes the mutated amino acid sequences.\n1def mutate_pseq(changes, ENSP, seq): 2 name_list = [] 3 seq_list = [] 4 5 name_list.append(f\u0026#39;{ENSP}_WT\u0026#39;) 6 seq_list.append(seq) 7 8 9 for c in changes[\u0026#39;Protein_change\u0026#39;]: 10 temp = seq 11 k = int(c[5:-3]) 12 #print(c[2:5], k, c[-3:]) 13 14 if seq[k-1] == a_as[c[2:5]]: 15 temp2 = temp[:k-1] + a_as[c[-3:]] + temp[k:] 16 name_list.append(ENSP+\u0026#34;_\u0026#34;+c) 17 seq_list.append(temp2) 18 logging.info(f\u0026#34;Mutated protein sequence with change {c}.\u0026#34;) 19 else: 20 logging.info(f\u0026#39;Something wrong with {c}\u0026#39;) 21 22 return(name_list, seq_list) 23 24nlist, slist = mutate_pseq(data, ENSP[1:-2], seq) Write results to a file Finally, write out the results as FASTA format to a single file:\n/\u0026gt;ENSP12344678_A345T\nADGJRKAJGJRHJRJKDHEUIEJAHK\n1def save_seqs(nlist, slist, outname): 2 with open(f\u0026#34;{outname}.fasta\u0026#34;,\u0026#34;w\u0026#34;) as f: 3 for i in range(len(slist)): 4 f.write(nlist[i] + \u0026#34;\\n\u0026#34; + slist[i] + \u0026#34;\\n\u0026#34;) 5 6 logging.info(f\u0026#34;File {outname}.fasta saved.\u0026#34;) Summary / future to do\u0026rsquo;s Complete script can be found in github .\nFuture modifications to the script:\n[] Multiple isoform checks\n[] Add GRCh38 version API\n[] Make an option to write sequences to a single OR separete FASTA files\n","permalink":"http://localhost:1313/posts/mutating-protein-sequence/","summary":"In silico protein folding Recent improvements in protein folding tools such as AlphaFold2 have dramatically changed protein structure research. In silico predictions have been able to reach comparable accuracy to experimental techniques such as X-ray crystallography and cryo-electron microscopy. These tools may be useful to help filter protein structures for experimental studies.\nMissense mutations Missense mutations are single nucleotide changes in nucleotide sequence that lead to amino acid change in the protein sequence.","title":"Creating mutated protein sequences from a list of amino acid changes"},{"content":"","permalink":"http://localhost:1313/posts/test-post/","summary":"","title":"Test Post"},{"content":"","permalink":"http://localhost:1313/about/","summary":"","title":"About"}]